// Even-odd sorting (the specific order in this paraller case, algorithm usually referred to as Odd-even)
// Assumes element count to be dividable by BATCHER_THREAD_GROUP * 2
// https://www.youtube.com/watch?v=CfrEhUtGV-c

// Constants
#define CALC_GROUP_SIZE 1024
#define SORT_THREAD_GROUP_SIZE 16
#define BATCHER_THREAD_GROUP_SIZE 32

#pragma kernel CalcIndicesDistances
#pragma kernel Sort
#pragma kernel BatcherMerge

uniform float3 Target;
RWStructuredBuffer<float3> Positions;

uniform uint Count;
RWBuffer<uint> Indices;
RWBuffer<uint> Distances;

[numthreads(CALC_GROUP_SIZE, 1, 1)]
void CalcIndicesDistances(uint3 id : SV_DispatchThreadID)
{
    Indices[id.x] = id.x;
    Distances[id.x] = asuint(distance(Target, Positions[id.x]));
}

groupshared uint SortPass[SORT_THREAD_GROUP_SIZE * 2];
groupshared uint SortPassDistances[SORT_THREAD_GROUP_SIZE * 2];

bool isOdd(uint value)
{
    return value % 2;
}

bool isInSortBounds(uint value)
{
    return value < SORT_THREAD_GROUP_SIZE * 2 && value >= 0;
}

void SortSwap(uint sourceIndex, uint destIndex)
{
    if (SortPassDistances[destIndex] < SortPassDistances[sourceIndex])
    {
        uint swap = SortPass[sourceIndex];
        uint distSwap = SortPassDistances[sourceIndex];
        SortPass[sourceIndex] = SortPass[destIndex];
        SortPass[destIndex] = swap;
        SortPassDistances[sourceIndex] = SortPassDistances[destIndex];
        SortPassDistances[destIndex] = distSwap;
    }
}

// Sort kernel
[numthreads(SORT_THREAD_GROUP_SIZE, 1, 1)]
void Sort(uint3 id : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 Gid : SV_GroupID)
{
    // Populate groupshared memory with the 2 indices from Indices handled by this thread (0, 512 or 356, 868 or 511, 1023)
    uint groupIndexOffset = Gid.x * SORT_THREAD_GROUP_SIZE;
    
    // From global buffers to groupshared variables
    SortPass[GTid.x] = Indices[id.x + groupIndexOffset];
    SortPass[GTid.x + SORT_THREAD_GROUP_SIZE] = Indices[id.x + groupIndexOffset + SORT_THREAD_GROUP_SIZE];
    
    SortPassDistances[GTid.x] = Distances[id.x + groupIndexOffset];
    SortPassDistances[GTid.x + SORT_THREAD_GROUP_SIZE] = Distances[id.x + groupIndexOffset + SORT_THREAD_GROUP_SIZE];
    
    // Sync
    // https://developer.download.nvidia.com/compute/DevZone/docs/html/DirectCompute/doc/DirectCompute_Programming_Guide.pdf
    GroupMemoryBarrierWithGroupSync();
    
    bool isOddPass = false;
    
    // If count is odd add one because every Even-Odd cycle has to be completed
    // assume the array is perfectly dividable by thread count
    const uint passCount = SORT_THREAD_GROUP_SIZE * 2; //Count % 2 ? Count + 1 : Count;

    uint sourceIndex = 0;
    uint destIndex = 0;
    
    for (uint i = 0; i < passCount; i++)
    {
        sourceIndex = isOddPass ? GTid.x * 2 + 1 : GTid.x * 2;
        destIndex = sourceIndex + 1;
        
        // Handle odd pass last index from going out of bounds
        if (isOddPass && !isInSortBounds(destIndex))
        {
            sourceIndex = 0;
            destIndex = SORT_THREAD_GROUP_SIZE * 2 - 1;
        }
        
        // Compare-Swap
        SortSwap(sourceIndex, destIndex);
    
        GroupMemoryBarrierWithGroupSync();
        
        // Flip for next pass (Odd-Even)
        isOddPass = !isOddPass;
    }
    
    // From groupshared variables back to global buffers
    Indices[id.x + groupIndexOffset] = SortPass[GTid.x];
    Indices[id.x + groupIndexOffset + SORT_THREAD_GROUP_SIZE] = SortPass[GTid.x + SORT_THREAD_GROUP_SIZE];
    
    Distances[id.x + groupIndexOffset] = SortPassDistances[GTid.x];
    Distances[id.x + groupIndexOffset + SORT_THREAD_GROUP_SIZE] = SortPassDistances[GTid.x + SORT_THREAD_GROUP_SIZE];
}

uniform bool isOddDispatch;
uniform uint groupCount;

groupshared uint BatcherPass[BATCHER_THREAD_GROUP_SIZE * 2];
groupshared uint BatcherPassDistances[BATCHER_THREAD_GROUP_SIZE * 2];

void BatcherSwap(uint sourceIndex, uint destIndex)
{
    if (BatcherPassDistances[destIndex] < BatcherPassDistances[sourceIndex])
    {
        uint swap = BatcherPass[sourceIndex];
        uint distSwap = BatcherPassDistances[sourceIndex];
        BatcherPass[sourceIndex] = BatcherPass[destIndex];
        BatcherPass[destIndex] = swap;
        BatcherPassDistances[sourceIndex] = BatcherPassDistances[destIndex];
        BatcherPassDistances[destIndex] = distSwap;
    }
}

// Batcher's odd-even merge kernel
// Double the thread group size to merge 2 sorted sub arrays
[numthreads(BATCHER_THREAD_GROUP_SIZE, 1, 1)]
void BatcherMerge(uint3 id : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 Gid : SV_GroupID)
{
    // Populate groupshared memory with the 2 indices from Indices handled by this thread (0, 512 or 356, 868 or 511, 1023)
    uint groupIndexOffset = Gid.x * BATCHER_THREAD_GROUP_SIZE;
    
    // Initialize group shared memory with dispatch-level subarray offset
    // Even pass doesn't have offset because it automically mixes subarrays of 512 in the "even" manner
    // Odd pass offsets to right by subarray length and last thread group is skipped
    uint iOffset = isOddDispatch ? BATCHER_THREAD_GROUP_SIZE : 0;
    // Skip last thread group during Odd pass
    if (isOddDispatch && Gid.x == groupCount - 1)
        return;
    
    // From global buffers to groupshared variables
    BatcherPass[GTid.x] = Indices[id.x + groupIndexOffset + iOffset];
    BatcherPass[GTid.x + BATCHER_THREAD_GROUP_SIZE] = Indices[id.x + groupIndexOffset + BATCHER_THREAD_GROUP_SIZE + iOffset];
    
    BatcherPassDistances[GTid.x] = Distances[id.x + groupIndexOffset + iOffset];
    BatcherPassDistances[GTid.x + BATCHER_THREAD_GROUP_SIZE] = Distances[id.x + groupIndexOffset + BATCHER_THREAD_GROUP_SIZE + iOffset];
    
    GroupMemoryBarrierWithGroupSync();
    
    // Pass 1 = Compare same indices from the 2 subarrays with decreasing subarray length
    // (even to even, odd to odd, example with sub arrays of length 8: 0 to 14 and 1 to 15 and 2 to 12...)
    uint subArrayLength = BATCHER_THREAD_GROUP_SIZE;
    // Index of the subArray where this index should reside
    uint subArrayIndex = floor(GTid.x / subArrayLength);
    // Length of the array where the merging takes place
    uint mergeArrayLength = subArrayLength * 2;
    uint mergeArrayOffset = mergeArrayLength * subArrayIndex;
    
    uint sourceIndex = 0;
    uint destIndex = 0;
    for (subArrayLength = BATCHER_THREAD_GROUP_SIZE; subArrayLength >= 2; subArrayLength -= 2)
    {
        uint sourceOffset = BATCHER_THREAD_GROUP_SIZE - subArrayLength;
        
        sourceIndex = GTid.x + sourceOffset;
        destIndex = sourceIndex + subArrayLength;
        
        if (GTid.x < subArrayLength)
            // Compare-Swap
            BatcherSwap(sourceIndex, destIndex);
    
        GroupMemoryBarrierWithGroupSync();
    }
    
    // Pass 2 = Odd pass
    // (even to even, odd to odd, 1 to 3 and 2 to 4 and 5 to 7...)
    sourceIndex = (GTid.x - 1) * 2 + 1;
    destIndex = sourceIndex + 1;
    
    if (GTid.x != 0)
        // Compare-Swap
        BatcherSwap(sourceIndex, destIndex);
    
    GroupMemoryBarrierWithGroupSync();
    
    // From groupshared variables back to global buffers
    Indices[id.x + groupIndexOffset + iOffset] = BatcherPass[GTid.x];
    Indices[id.x + groupIndexOffset + BATCHER_THREAD_GROUP_SIZE + iOffset] = BatcherPass[GTid.x + BATCHER_THREAD_GROUP_SIZE];
    
    Distances[id.x + groupIndexOffset + iOffset] = BatcherPassDistances[GTid.x];
    Distances[id.x + groupIndexOffset + BATCHER_THREAD_GROUP_SIZE + iOffset] = BatcherPassDistances[GTid.x + BATCHER_THREAD_GROUP_SIZE];
}
